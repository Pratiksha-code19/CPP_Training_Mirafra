#include <iostream>
#include <queue>
#include <stack>
#include <chrono>

using namespace std;

struct Vehicle {
    string type;  // 'emergency' or 'normal'
    int entryTime;  // time of entry in minutes since the system started

    Vehicle(string t, int entry) : type(t), entryTime(entry) {}
};

// Custom comparator to give priority to emergency vehicles
struct CompareVehicle {
    bool operator()(const Vehicle &v1, const Vehicle &v2) {
        if (v1.type == "emergency" && v2.type == "normal") {
            return false;  // emergency vehicle has higher priority
        }
        return true;  // normal vehicle has lower priority
    }
};

class ParkingLot {
private:
    int totalSpaces;         // Total spaces in the parking lot
    stack<Vehicle> parkingLot;  // Parking lot implemented using a stack
    queue<Vehicle> waitingQueue;  // Queue for vehicles waiting for parking
    priority_queue<Vehicle, vector<Vehicle>, CompareVehicle> waitingQueuePriority; // Priority queue

    int totalRevenue = 0;   // To track total revenue

public:
    ParkingLot(int spaces) : totalSpaces(spaces) {}

    // Simulate vehicle entering the parking lot
    void vehicleEnter(string type, int entryTime) {
        Vehicle newVehicle(type, entryTime);

        if (parkingLot.size() < totalSpaces) {
            // If parking lot has space, park the vehicle
            parkingLot.push(newVehicle);
            cout << type << " vehicle entered at time " << entryTime << " and parked." << endl;
        } else {
            // If parking lot is full, add to waiting queue (with priority)
            waitingQueuePriority.push(newVehicle);
            cout << type << " vehicle entered at time " << entryTime << " and is waiting." << endl;
        }
    }

    // Simulate vehicle exiting the parking lot
    void vehicleExit(int exitTime) {
        if (!parkingLot.empty()) {
            Vehicle parkedVehicle = parkingLot.top();
            parkingLot.pop();

            // Calculate parking duration
            int parkingDuration = exitTime - parkedVehicle.entryTime;

            if (parkedVehicle.type == "normal") {
                totalRevenue += 10 * parkingDuration;  // Normal vehicle pays $10 per hour
            }

            cout << parkedVehicle.type << " vehicle exited at time " << exitTime << ". Duration: " 
                 << parkingDuration << " minutes. Revenue: " << (parkedVehicle.type == "normal" ? 10 * parkingDuration : 0) << endl;

            // Now try to park the next vehicle from the priority queue
            if (!waitingQueuePriority.empty()) {
                Vehicle nextVehicle = waitingQueuePriority.top();
                waitingQueuePriority.pop();
                vehicleEnter(nextVehicle.type, exitTime);
            }
        } else {
            cout << "No vehicle is currently parked." << endl;
        }
    }

    // Display total revenue generated by the parking lot
    void displayRevenue() {
        cout << "Total Revenue: $" << totalRevenue << endl;
    }
};

int main() {
    // Assume the parking lot has 3 spaces
    ParkingLot parkingLot(3);

    // Simulating vehicle entries and exits
    parkingLot.vehicleEnter("normal", 0);  // Normal vehicle enters at time 0
    parkingLot.vehicleEnter("emergency", 5);  // Emergency vehicle enters at time 5
    parkingLot.vehicleEnter("normal", 10);  // Normal vehicle enters at time 10
    parkingLot.vehicleEnter("normal", 15);  // Normal vehicle enters at time 15 (lot full)

    parkingLot.vehicleExit(30);  // A vehicle exits at time 30
    parkingLot.vehicleExit(45);  // A vehicle exits at time 45

    // Display total revenue
    parkingLot.displayRevenue();

    return 0;
}
